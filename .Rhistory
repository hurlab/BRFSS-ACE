ungroup()
# Stop timing and store elapsed time
elapsed_time <- toc(quiet = TRUE)
cat("After running the code", elapsed_time$callback_msg, "before getting the result \n")
# Return the entire dataset with the new columns appended
return(df)
}
# Function to calculate prevalence of at least one ACE or none
calculate_ACE_experience_counts <- function(df) {
ace_category_columns <- c("abuse_physical", "abuse_sexual", "abuse_emotional",
"household_mental", "household_substance",
"household_incarcerated", "household_violence",
"parental_separation")
at_least_one_experience <- sum(rowSums(df[ace_category_columns] == 1, na.rm = TRUE) > 0)
all_no_experience <- sum(rowSums(df[ace_category_columns] == 1, na.rm = TRUE) == 0)
return(list(at_least_one_experience = at_least_one_experience, all_no_experience = all_no_experience))
}
# Function to group ACE score
group_ACE_score <- function(df) {
df <- df %>%
mutate(
ACE_group = case_when(
ACE_score == 0 ~ "None",
ACE_score >= 1 & ACE_score <= 2 ~ "Low ACE (1-2)",
ACE_score >= 3 ~ "High ACE (3+)"
)
)
return(df)
}
# Function to calculate prevalence of individual ACEs
calculate_individual_ACE_prevalence <- function(df) {
prevalence_list <- list(
emotional_abuse = mean(df$abuse_emotional == 1, na.rm = TRUE) * 100,
physical_abuse = mean(df$abuse_physical == 1, na.rm = TRUE) * 100,
substance_abuse = mean(df$household_substance == 1, na.rm = TRUE) * 100,
sexual_abuse = mean(df$abuse_sexual == 1, na.rm = TRUE) * 100
)
return(prevalence_list)
}
# Function to calculate overall ACE prevalence
calculate_overall_ACE_prevalence <- function(df) {
list(
one_or_more_ACE = mean(df$ACE_score >= 1, na.rm = TRUE) * 100,
two_or_more_ACE = mean(df$ACE_score >= 2, na.rm = TRUE) * 100,
four_or_more_ACE = mean(df$ACE_score >= 4, na.rm = TRUE) * 100
)
}
# Function to analyze gender and race prevalence of 4+ ACEs
analyze_gender_race_four_or_more_ACE <- function(df) {
df <- df %>%
mutate(four_or_more_aces = ifelse(ACE_score >= 4, "Yes", "No"))
gender_summary <- df %>%
group_by(gender) %>%
summarise(
total = n(),
four_or_more_aces_count = sum(four_or_more_aces == "Yes", na.rm = TRUE),
four_or_more_aces_prop = mean(four_or_more_aces == "Yes", na.rm = TRUE)
)
race_summary <- df %>%
group_by(race) %>%
summarise(
total = n(),
four_or_more_aces_count = sum(four_or_more_aces == "Yes", na.rm = TRUE),
four_or_more_aces_prop = mean(four_or_more_aces == "Yes", na.rm = TRUE)
)
return(list(gender_summary = gender_summary, race_summary = race_summary))
}
# Function to create single column for sexual orientation
create_sexual_orientation <- function(df) {
df <- df %>%
mutate(
sexual_orientation = case_when(
sex_orient_m == "straight" | sex_orient_f == "straight" ~ "straight",
sex_orient_m == "gay" | sex_orient_f == "lesbian" ~ "gay/lesbian",
sex_orient_m == "bisexual" | sex_orient_f == "bisexual" ~ "bisexual",
transgender == 1 | transgender == 2 | transgender == 3 ~ "transgender",
TRUE ~ NA_character_
)
) %>%
select(-sex_orient_m, -sex_orient_f, -transgender)
return(df)
}
# Function to adjust weight and height variables
adjust_weight_height <- function(df) {
df <- df %>%
mutate(
weight = as.numeric(as.character(weight)),
weight = case_when(
weight >= 50 & weight < 1000 ~ round(weight / 2.2),
weight >= 9000 & weight < 9999 ~ weight - 9000,
TRUE ~ as.numeric(NA)
),
height = case_when(
height >= 50 & height < 1000 ~ round(((height %/% 100) * 12 + (height %% 100)) * 2.54),
height >= 9000 & height < 9999 ~ height - 9000,
TRUE ~ as.numeric(NA)
)
)
return(df)
}
# Function to calculate weighted prevalence and confidence intervals for ACE variables
calculate_weighted_prevalence <- function(df, ace_variables, id_col, weight_col) {
# Set up survey design with weights
design <- svydesign(ids = ~get(id_col), data = df, weights = ~get(weight_col))
# Define a helper function for individual ACE prevalence calculation
calc_prevalence <- function(var) {
result <- svymean(~get(var), design = design, na.rm = TRUE)
data.frame(
Variable = var,
Prevalence = round(100 * coef(result), 1),
CI_low = round(100 * confint(result)[, 1], 1),
CI_high = round(100 * confint(result)[, 2], 1)
)
}
# Calculate prevalence for each ACE variable
prevalence_results <- bind_rows(lapply(ace_variables, calc_prevalence))
return(prevalence_results)
}
# Function to create socio-demographic tables by ACE group
create_socio_demographic_table <- function(df, demographic_vars, ace_group_col) {
# Ensure ACE group is a factor with proper levels
df <- df %>%
mutate(
!!ace_group_col := factor(!!sym(ace_group_col), levels = c("None", "Low ACE (1-2)", "High ACE (3+)"))
)
# Initialize an empty list to store tables
tables_list <- list()
# Loop through demographic variables and calculate counts by ACE group
for (var in demographic_vars) {
# Dynamically calculate the table and convert to data frame
table_df <- as.data.frame(table(df[[var]], df[[ace_group_col]]))
# Add a column for the variable name and rename columns
table_df$Variable <- var
colnames(table_df) <- c("Category", "ACE Group", "Count", "Variable")
# Append the table to the list
tables_list[[var]] <- table_df
}
# Combine all tables and pivot to get ACE groups as columns
combined_table <- bind_rows(tables_list) %>%
pivot_wider(names_from = `ACE Group`, values_from = Count) %>%
arrange(Variable, Category)
return(combined_table)
}
library(ggplot2)
# Function to plot some demographic variables in the data:
plot_distributions <- function(df, variables) {
# Initialize an empty list to store plots
plots <- list()
# Loop through each variable
for (var in variables) {
# Check if the variable is numeric
if (is.numeric(df[[var]])) {
# Filter out NA values for numeric variables
filtered_df <- df %>% filter(!is.na(.data[[var]]))
# Create a histogram
p <- ggplot(filtered_df, aes(x = .data[[var]])) +
geom_histogram(fill = "blue", color = "black", bins = 30) +
labs(
title = paste("Distribution of", var),
x = var,
y = "Count"
) +
theme_minimal() +
theme(
panel.background = element_rect(fill = "white", color = NA),  # White background
plot.background = element_rect(fill = "white", color = NA),  # White plot area
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Check if the variable is categorical (factor or character)
} else if (is.factor(df[[var]]) || is.character(df[[var]])) {
# Filter out NA values for categorical variables
filtered_df <- df %>% filter(!is.na(.data[[var]]))
# Create a bar plot
p <- ggplot(filtered_df, aes(x = .data[[var]])) +
geom_bar(fill = "blue", color = "black") +
labs(
title = paste("Distribution of", var),
x = var,
y = "Count"
) +
theme_minimal() +
theme(
panel.background = element_rect(fill = "white", color = NA),  # White background
plot.background = element_rect(fill = "white", color = NA),  # White plot area
axis.text.x = element_text(angle = 45, hjust = 1)
)
} else {
next  # Skip variables that are not numeric or categorical
}
# Add the plot to the list
plots[[var]] <- p
}
return(plots)
}
# Function to visualize ACE scores by a specified grouping variable
plot_ace_distribution <- function(df, group_var, save_name, comparisons = NULL) {
# Ensure group_var exists in the dataset
if (!group_var %in% names(df)) {
stop(paste("Variable", group_var, "is not in the dataset."))
}
# Remove rows with NA in the grouping variable
df <- df %>%
filter(!is.na(!!sym(group_var)))
# Get unique levels of the grouping variable
group_levels <- unique(df[[group_var]])
# Generate a palette with enough colors
color_palette <- RColorBrewer::brewer.pal(n = length(group_levels), name = "Set3")
# Generate the ggplot
p <- ggplot(df, aes(x = !!sym(group_var), y = ACE_score, fill = !!sym(group_var))) +
geom_boxplot(outlier.shape = NA, alpha = 0.7) +
geom_jitter(width = 0.2, alpha = 0.4) +
scale_fill_manual(values = color_palette) +
labs(
title = paste("Distribution of ACE Score by", group_var),
x = group_var,
y = "ACE Score"
) +
theme_minimal() +
theme(
panel.background = element_rect(fill = "white", color = NA),  # White background
plot.background = element_rect(fill = "white", color = NA),  # White plot area
axis.text.x = element_text(angle = 45, hjust = 1, face = "bold"),
axis.title = element_text(face = "bold")
)
# Add comparisons if specified
if (!is.null(comparisons)) {
p <- p + stat_compare_means(comparisons = comparisons, label = "p.signif")
}
# Save the plot
ggsave(filename = paste0(save_name, ".png"), plot = p, width = 8, height = 6)
return(p)
}
# Function that generates the map for a given race and then loop over all unique races
# Define a color palette for each race
race_colors <- list(
"AIAN" = c("lightyellow", "coral"),
"asian" = c("lightblue", "darkblue"),
"black" = c("lightgreen", "darkgreen"),
"hispanic" = c("lavender", "purple"),
"other" = c("peachpuff", "darkorange"),
"white" = c("lightpink", "red")
)
# Function to adjustr survey weights after calculating the ACE scores
adjust_survey_weights <- function(df, weight_col = "survey_weights", year_col = "IYEAR") {
# Ensure the weight and year columns exist
if (!all(c(weight_col, year_col) %in% colnames(df))) {
stop("Required columns are missing from the dataset.")
}
# Total number of complete cases after ACE filtering
total_n <- nrow(df)
# Calculate number of cases per year
year_counts <- df %>%
group_by(.data[[year_col]]) %>%
summarise(complete_n = n(), .groups = "drop")
# Merge year-wise counts back to main data
df_adjusted <- df %>%
left_join(year_counts, by = setNames("IYEAR", year_col)) %>%
mutate(
!!weight_col := .data[[weight_col]] * (total_n / complete_n)
) %>%
select(-complete_n)
return(df_adjusted)
}
#########################################################
## Read in the data
years <- c("2019", "2020", "2021", "2022", "2023")
data_list <- lapply(years, function(year) {
file_name <- paste0(BRFSSdata_dir, "LLCP", year, ".XPT")
if (file.exists(file_name)) {
tryCatch({
data <- read.xport(file_name)
return(data)
}, error = function(e) {
warning(paste("Error reading XPT file for year", year, ":", e$message))
return(NULL)
})
} else {
zip_file_name <- paste0(BRFSSdata_dir, "LLCP", year, "XPT.zip")
if (file.exists(zip_file_name)) {
xpt_file_name <- paste0("LLCP", year, ".XPT")
con <- unz(zip_file_name, xpt_file_name)
if (length(showConnections(TRUE)[showConnections(TRUE)[,"description"] == paste(zip_file_name,xpt_file_name, sep = "/"),1]) == 0) {
warning(paste("XPT file not found inside zip for year", year))
return(NULL)
}
tryCatch({
data <- read.xport(con)
close(con)
return(data)
}, error = function(e) {
warning(paste("Error reading XPT from zip for year", year, ":", e$message))
close(con) # Ensure connection is closed even on error
return(NULL)
})
} else {
warning(paste("XPT or ZIP file not found for year", year))
return(NULL)
}
}
})
data_list <- lapply(years, function(year) {
file_name <- paste0(BRFSSdata_dir, "LLCP", year, ".XPT")
if (file.exists(file_name)) {
tryCatch({
data <- read.xport(file_name)
return(data)
}, error = function(e) {
warning(paste("Error reading XPT file for year", year, ":", e$message))
return(NULL)
})
} else {
zip_file_name <- paste0(BRFSSdata_dir, "LLCP", year, "XPT.zip")
xpt_file_name <- paste0("LLCP", year, ".XPT")
if (file.exists(zip_file_name)) {
con <- unz(zip_file_name, xpt_file_name)
tryCatch({
data <- read.xport(con)
close(con)
return(data)
}, error = function(e) {
warning(paste("Error reading XPT from zip for year", year, ":", e$message))
close(con)
return(NULL)
})
} else {
warning(paste("XPT or ZIP file not found for year", year))
return(NULL)
}
}
})
data_list <- lapply(years, function(year) {
file_name <- paste0(BRFSSdata_dir, "LLCP", year, ".XPT")
if (file.exists(file_name)) {
tryCatch({
data <- read.xport(file_name)
return(data)
}, error = function(e) {
warning(paste("Error reading XPT file for year", year, ":", e$message))
return(NULL)
})
} else {
zip_file_name <- paste0(BRFSSdata_dir, "LLCP", year, ".XPT.zip")
xpt_file_name <- paste0("LLCP", year, ".XPT")
if (file.exists(zip_file_name)) {
# Extract to a temp file
temp_dir <- tempdir()
extracted_file <- file.path(temp_dir, xpt_file_name) #Construct full path
tryCatch({
unzip(zip_file_name, files = xpt_file_name, exdir = temp_dir, overwrite = TRUE)
data <- read.xport(extracted_file)
file.remove(extracted_file) # Clean up temp file
return(data)
}, error = function(e) {
warning(paste("Error processing XPT from zip for year", year, ":", e$message))
if(file.exists(extracted_file)){
file.remove(extracted_file) # Clean up temp file on error
}
return(NULL)
})
} else {
warning(paste("XPT or ZIP file not found for year", year))
return(NULL)
}
}
})
years
year
year <- "2023"
file_name <- paste0(BRFSSdata_dir, "LLCP", year, ".XPT")
data <- read.xport(file_name)
zip_file_name <- paste0(BRFSSdata_dir, "LLCP", year, ".XPT.zip")
zip_file_name
getwd()
xpt_file_name <- paste0("LLCP", year, ".XPT")
xpt_file_name
file.exists(zip_file_name)
zip_file_name <- paste0(BRFSSdata_dir, "LLCP", year, "XPT.zip")
file.exists(zip_file_name)
zip_file_name <- paste0(BRFSSdata_dir, "LLCP", year, "XPT.zip")
xpt_file_name <- paste0("LLCP", year, ".XPT")
zip_file_name
file.exists(zip_file_name)
con <- unz(zip_file_name, xpt_file_name)
con
data <- read.xport(con)
?read.xport
data_list <- lapply(years, function(year) {
file_name <- paste0(BRFSSdata_dir, "LLCP", year, ".XPT")
if (file.exists(file_name)) {
tryCatch({
data <- read.xport(file_name)
return(data)
}, error = function(e) {
warning(paste("Error reading XPT file for year", year, ":", e$message))
return(NULL)
})
} else {
zip_file_name <- paste0(BRFSSdata_dir, "LLCP", year, ".XPT.zip")
xpt_file_name <- paste0("LLCP", year, ".XPT")
if (file.exists(zip_file_name)) {
# Extract to a temp file
temp_dir <- tempdir()
extracted_file <- file.path(temp_dir, xpt_file_name)
tryCatch({
unzip(zip_file_name, files = xpt_file_name, exdir = temp_dir, overwrite = TRUE)
data <- read.xport(extracted_file)
file.remove(extracted_file) # Delete temp file immediately
return(data)
}, error = function(e) {
warning(paste("Error processing XPT from zip for year", year, ":", e$message))
if(file.exists(extracted_file)){
file.remove(extracted_file) # Clean up temp file on error
}
return(NULL)
})
} else {
warning(paste("XPT or ZIP file not found for year", year))
return(NULL)
}
}
})
data_list <- lapply(years, function(year) {
file_name <- paste0(BRFSSdata_dir, "LLCP", year, ".XPT")
if (file.exists(file_name)) {
tryCatch({
data <- read.xport(file_name)
return(data)
}, error = function(e) {
warning(paste("Error reading XPT file for year", year, ":", e$message))
return(NULL)
})
} else {
zip_file_name <- paste0(BRFSSdata_dir, "LLCP", year, "XPT.zip")
xpt_file_name <- paste0("LLCP", year, ".XPT")
if (file.exists(zip_file_name)) {
# Extract to a temp file
temp_dir <- tempdir()
extracted_file <- file.path(temp_dir, xpt_file_name)
tryCatch({
unzip(zip_file_name, files = xpt_file_name, exdir = temp_dir, overwrite = TRUE)
data <- read.xport(extracted_file)
file.remove(extracted_file) # Delete temp file immediately
return(data)
}, error = function(e) {
warning(paste("Error processing XPT from zip for year", year, ":", e$message))
if(file.exists(extracted_file)){
file.remove(extracted_file) # Clean up temp file on error
}
return(NULL)
})
} else {
warning(paste("XPT or ZIP file not found for year", year))
return(NULL)
}
}
})
zip_file_name <- paste0(BRFSSdata_dir, "LLCP", year, "XPT.zip")
xpt_file_name <- paste0("LLCP", year, ".XPT")
zip_file_name
file.exists(zip_file_name)
# Extract to a temp file
temp_dir <- tempdir()
temp_dir
extracted_file <- file.path(temp_dir, xpt_file_name)
extracted_file
unzip(zip_file_name, files = xpt_file_name, exdir = temp_dir, overwrite = TRUE)
xpt_file_name
?unzip
temp_dir
unzip(zip_file_name, files = xpt_file_name, exdir = temp_dir, overwrite = TRUE)
unzip(zip_file_name, exdir = temp_dir, overwrite = TRUE)
unzip(zip_file_name, files = "LLCP2023.XPT", exdir = temp_dir, overwrite = TRUE)
zip_file_name
file_list <- unzip(zip_file_name, list=TRUE)
file_list
unzip(zip_file_name, files = "LLCP2023.XPT", exdir = temp_dir, overwrite = TRUE)
unzip(zip_file_name, files = c("LLCP2023.XPT"), exdir = temp_dir, overwrite = TRUE)
data_list <- lapply(years, function(year) {
file_name <- paste0(BRFSSdata_dir, "LLCP", year, ".XPT")
if (file.exists(file_name)) {
tryCatch({
data <- read.xport(file_name)
return(data)
}, error = function(e) {
warning(paste("Error reading XPT file for year", year, ":", e$message))
return(NULL)
})
} else {
zip_file_name <- paste0(BRFSSdata_dir, "LLCP", year, "XPT.zip")
xpt_file_name <- paste0("LLCP", year, ".XPT")
if (file.exists(zip_file_name)) {
# Extract to a temp file
temp_dir <- tempdir()
extracted_file <- file.path(temp_dir, xpt_file_name)
tryCatch({
unzip(zip_file_name, exdir = temp_dir, overwrite = TRUE)
data <- read.xport(extracted_file)
file.remove(extracted_file) # Delete temp file immediately
return(data)
}, error = function(e) {
warning(paste("Error processing XPT from zip for year", year, ":", e$message))
if(file.exists(extracted_file)){
file.remove(extracted_file) # Clean up temp file on error
}
return(NULL)
})
} else {
warning(paste("XPT or ZIP file not found for year", year))
return(NULL)
}
}
})
